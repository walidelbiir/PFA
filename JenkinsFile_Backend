@Library('PFA_Library') _

pipeline{
    agent any
    tools{nodejs "NodeJS 18.14.2"}
    stages{

        stage('Git Checkout') {
            steps {    
                script {
                    github.checkout(credentials: 'Github_Walid_Credentials' , githubURL: "https://github.com/walidelbiir/PFA_BackEnd_App.git")
                }
            }
        }
        stage("Installing Dependencies"){
            steps{
                script {
                    npm.install_dependencies()
                }
            }
            post {
                success {
                    script {
                        slack.sendSlackNotification(channel:"#pfa,walid.elbir" ,message: "Dependencies Installed successfully" ,status: "success")
                    }
                }
                failure {
                     script {
                        slack.sendSlackNotification(channel:"#pfa,walid.elbir" ,message: "Failure Installing Dependencies" ,status: "danger")
                    }
                }
            }
        }
        stage("Installing Tests Dependencies"){
            steps {
                script {
                    npm.install_backend_test_dependencies()
                }
            }
            post {
                success {
                    script {
                        slack.sendSlackNotification(channel:"#pfa,walid.elbir" ,message: "Testing Dependencies Installed successfully" ,status: "success")
                    }
                }
                failure {
                     script {
                        slack.sendSlackNotification(channel:"#pfa,walid.elbir" ,message: "Failure Installing Testing Dependencies" ,status: "danger")
                    }
                }
            }
        }
        stage("Testing") {
            steps {
                script{
                    npm.backend_test()
                }
            }
            post {
                success {
                    script {
                        slack.sendSlackNotification(channel:"#pfa,walid.elbir" ,message: "Testing Done successfully" ,status: "success")
                    }
                }
                failure {
                     script {
                        slack.sendSlackNotification(channel:"#pfa,walid.elbir" ,message: "Failure Testing" ,status: "danger")
                    }
                }
            }
        }
        // stage("SonarQube Analysis") {
        //     steps {
        //         script {
        //             sonar.executeAnalysis('sonarqube_scanner' , 'sonraqube_server' , './sonar-project.properties')
        //         }
        //     }

        //     post {
        //         success {
        //             script {
        //                 sonar.qualityGateAnalysis()
        //             }
        //         }
        //     }
        // }
        
    }
    post {
                success {
                    script {
                        slack.sendSlackNotification(channel:"#pfa,walid.elbir" ,message: "Pipeline Terminated Successfully" ,status: "success")
                    }
                }
                failure {
                     script {
                        slack.sendSlackNotification(channel:"#pfa,walid.elbir" ,message: "Pipeline Failed" ,status: "danger")
                    }
                }
            }
}